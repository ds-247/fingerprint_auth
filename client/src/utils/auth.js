let rawId;


export async function signup(params) {
  const email = params.email;

  const publicKey = {
    challenge: new Uint8Array([0,1,2,3,4,5,6,7,8]), // A random value generated by the server
    rp: {
      name: "YourAppName",
    },
    user: {
      id: new Uint8Array(16), // Unique user ID
      name: email,
      displayName: "User Name",
    },
    pubKeyCredParams: [{ alg: -7, type: "public-key" }],
    authenticatorSelection: {
      authenticatorAttachment: "platform", // To use built-in biometric sensor
      userVerification: "required",
    },
    timeout: 60000,
    attestation: "direct",
  };

  try {
    const credential = await navigator.credentials.create({
      publicKey,
    });
      rawId = credential.rawId;
    console.log("Registration successful", credential);
    // Send `credential` to the server for verification and storage
  } catch (err) {
    console.error("Registration failed", err);
  }
}

export async function login(params) {
    const email = params.email;

     const publicKey = {
      challenge: new Uint8Array([0,1,2,3,4,5,6,7,8]), // A random value generated by the server
      allowCredentials: [
        {
          id: rawId, // The credential ID returned during registration
          type: "public-key",
        },
      ],
      timeout: 60000,
    };

    try {
      const assertion = await navigator.credentials.get({ publicKey });
      console.log("Authentication successful", assertion);
      // Send `assertion` to the server for verification
    } catch (err) {
      console.error("Authentication failed", err);
    }
}
